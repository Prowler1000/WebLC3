pages:
  - title: The Editor
    body: "The editor is what you see when you first open WebLC3.
    It is where you write the source code for your LC-3 program,
    save and load programs, and assemble your program into something the LC-3 can
    run.

    The text editor is displayed prominently in the middle of the screen.
    To start writing code, click inside the editor where you want to place the
    cursor and start typing."

  - title: New File
    body: "The <b>New</b> button will clear the content of the text editor and start a new file."
    component: new

  - title: Open File
    body: "The <b>Open</b> button allows you to open an existing .asm file on your computer in the editor."
    component: open

  - title: Save
    body: "The <b>Save</b> button allows you to save your work from the text editor by downloading the .asm file to your computer."
    component: save

  - title: LC-3 Instructions
    body: "<h3>Legend:</h3>
    <ul>
      <li>R_ = Register</li>
      <li>#imm_ = Immediate value, _ bits (all values are sign-extended to 16 bits before use)</li>
      <li>mem[x] = Contents of memory at address <i>x</i></li>
    </ul>
    <table>
    <tr>
      <th>Instruction</th>
      <th>Syntax</th>
      <th>Description</th>
    </tr>
    <tr>
      <td>ADD</td>
      <td>ADD RD, RX, RY</td>
      <td>RD = RX + RY</td>
    <tr>
    <tr>
      <td>ADD</td>
      <td>ADD RD, RX, #imm5</td>
      <td>RD = RX + imm5</td>
    <tr>
    <tr>
      <td>AND</td>
      <td>AND RD, RX, RY</td>
      <td>RD = RX AND RY</td>
    <tr>
    <tr>
      <td>AND</td>
      <td>AND RD, RX, #imm5</td>
      <td>RD = RX AND imm5</td>
    <tr>
    <tr>
      <td>BR</td>
      <td>BR[n][z][p] Label</td>
      <td>If any of the conditions (n/z/p) are met, PC = Label. BR is equivalent to BRnzp</td>
    <tr>
    <tr>
      <td>JMP</td>
      <td>JMP RD</td>
      <td>PC = RD</td>
    <tr>
    <tr>
      <td>JSR</td>
      <td>JSR Label</td>
      <td>R7 = PC, PC = Label</td>
    <tr>
    <tr>
      <td>JSRR</td>
      <td>JSRR RD</td>
      <td>R7 = PC, PC = RD</td>
    <tr>
    <tr>
      <td>LD</td>
      <td>LD RD, Label</td>
      <td>RD = mem[Label]</td>
    <tr>
    <tr>
      <td>LDI</td>
      <td>LDI RD, Label</td>
      <td>RD = mem[mem[Label]]</td>
    <tr>
    <tr>
      <td>LDR</td>
      <td>LDR RD, RX, #imm6</td>
      <td>RD = mem[RX + imm6]</td>
    <tr>
    <tr>
      <td>LEA</td>
      <td>LEA RD, Label</td>
      <td>RD = Label</td>
    <tr>
    <tr>
      <td>NOT</td>
      <td>NOT RD, RX</td>
      <td>RD = NOT RX</td>
    <tr>
    <tr>
      <td>RET</td>
      <td>RET</td>
      <td>PC = R7 (this instruction is the same as JMP R7)</td>
    <tr>
    <tr>
      <td>RTI</td>
      <td>RTI</td>
      <td>See the page on Traps, Interrupts and Exceptions</td>
    <tr>
    <tr>
      <td>ST</td>
      <td>ST RD, Label</td>
      <td>mem[Label] = RD</td>
    <tr>
    <tr>
      <td>STI</td>
      <td>STI RD, Label</td>
      <td>mem[mem[Label]] = RD</td>
    <tr>
    <tr>
      <td>STR</td>
      <td>STR RD, RX, #imm6</td>
      <td>mem[RX + imm6] = RD</td>
    <tr>
    <tr>
      <td>TRAP</td>
      <td>TRAP #imm8</td>
      <td>PC = mem[imm8], see the page on Traps, Interrupts and Exceptions</td>
    <tr>
    </table>"
  